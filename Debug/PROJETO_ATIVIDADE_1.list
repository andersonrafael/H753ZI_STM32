
PROJETO_ATIVIDADE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f54  08005f54  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f8c  08005f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f94  08005f94  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005f98  08005f98  00006f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005f9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000063c  24000010  08005fac  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400064c  08005fac  0000764c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001381f  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002656  00000000  00000000  0001a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000da8  00000000  00000000  0001ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a7f  00000000  00000000  0001dc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003719c  00000000  00000000  0001e6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c48  00000000  00000000  0005587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bbc0  00000000  00000000  000684c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c4083  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038fc  00000000  00000000  001c40c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001c79c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f3c 	.word	0x08005f3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005f3c 	.word	0x08005f3c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000608:	f000 fa3e 	bl	8000a88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fcc2 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f80c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f960 	bl	80008d8 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000618:	f000 f92c 	bl	8000874 <MX_USB_OTG_FS_PCD_Init>
  MX_IWDG1_Init();
 800061c:	f000 f874 	bl	8000708 <MX_IWDG1_Init>
  MX_LPUART1_UART_Init();
 8000620:	f000 f890 	bl	8000744 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f8da 	bl	80007dc <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x24>

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fc51 	bl	8005ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 fc4b 	bl	8005ee2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f001 fa09 	bl	8001a64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <SystemClock_Config+0xd4>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <SystemClock_Config+0xd4>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <SystemClock_Config+0xd4>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xd8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <SystemClock_Config+0xd8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <SystemClock_Config+0xd8>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000688:	bf00      	nop
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <SystemClock_Config+0xd8>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000696:	d1f8      	bne.n	800068a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000698:	232a      	movs	r3, #42	@ 0x2a
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800069c:	2301      	movs	r3, #1
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2340      	movs	r3, #64	@ 0x40
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fa1f 	bl	8001af8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 fa0e 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	233f      	movs	r3, #63	@ 0x3f
 80006c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fe5f 	bl	80023ac <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006f4:	f000 f9f4 	bl	8000ae0 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	@ 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58000400 	.word	0x58000400
 8000704:	58024800 	.word	0x58024800

08000708 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_IWDG1_Init+0x34>)
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <MX_IWDG1_Init+0x38>)
 8000710:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_IWDG1_Init+0x34>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_IWDG1_Init+0x34>)
 800071a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800071e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_IWDG1_Init+0x34>)
 8000722:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000726:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_IWDG1_Init+0x34>)
 800072a:	f001 f81a 	bl	8001762 <HAL_IWDG_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000734:	f000 f9d4 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2400002c 	.word	0x2400002c
 8000740:	58004800 	.word	0x58004800

08000744 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074a:	4a23      	ldr	r2, [pc, #140]	@ (80007d8 <MX_LPUART1_UART_Init+0x94>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078c:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800078e:	f003 ffc5 	bl	800471c <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f9a2 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007a0:	f004 ffcd 	bl	800573e <HAL_UARTEx_SetTxFifoThreshold>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007aa:	f000 f999 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007b2:	f005 f802 	bl	80057ba <HAL_UARTEx_SetRxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007bc:	f000 f990 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 80007c2:	f004 ff83 	bl	80056cc <HAL_UARTEx_DisableFifoMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007cc:	f000 f988 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2400003c 	.word	0x2400003c
 80007d8:	58000c00 	.word	0x58000c00

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_USART3_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <MX_USART3_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_USART3_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_USART3_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_USART3_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART3_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000826:	f003 ff79 	bl	800471c <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f956 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_USART3_UART_Init+0x90>)
 8000838:	f004 ff81 	bl	800573e <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f94d 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_USART3_UART_Init+0x90>)
 800084a:	f004 ffb6 	bl	80057ba <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f944 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_USART3_UART_Init+0x90>)
 800085a:	f004 ff37 	bl	80056cc <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f93c 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	240000d0 	.word	0x240000d0
 8000870:	40004800 	.word	0x40004800

08000874 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087a:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800087c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000880:	2209      	movs	r2, #9
 8000882:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000886:	2202      	movs	r2, #2
 8000888:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000892:	2202      	movs	r2, #2
 8000894:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000898:	2201      	movs	r2, #1
 800089a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008bc:	f000 ffa2 	bl	8001804 <HAL_PCD_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008c6:	f000 f90b 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000164 	.word	0x24000164
 80008d4:	40080000 	.word	0x40080000

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	@ 0x30
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b61      	ldr	r3, [pc, #388]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	4a5f      	ldr	r2, [pc, #380]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090c:	4b59      	ldr	r3, [pc, #356]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	4a58      	ldr	r2, [pc, #352]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091c:	4b55      	ldr	r3, [pc, #340]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b52      	ldr	r3, [pc, #328]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	4a50      	ldr	r2, [pc, #320]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000948:	4b4a      	ldr	r3, [pc, #296]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	4a49      	ldr	r2, [pc, #292]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000958:	4b46      	ldr	r3, [pc, #280]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	4b43      	ldr	r3, [pc, #268]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a41      	ldr	r2, [pc, #260]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800096e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b3f      	ldr	r3, [pc, #252]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000994:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a32      	ldr	r2, [pc, #200]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <MX_GPIO_Init+0x19c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c6:	482c      	ldr	r0, [pc, #176]	@ (8000a78 <MX_GPIO_Init+0x1a0>)
 80009c8:	f000 feb2 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <MX_GPIO_Init+0x1a4>)
 80009d2:	f000 fead 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0x1a8>)
 80009dc:	f000 fea8 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4823      	ldr	r0, [pc, #140]	@ (8000a84 <MX_GPIO_Init+0x1ac>)
 80009f8:	f000 fcea 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80009fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4818      	ldr	r0, [pc, #96]	@ (8000a78 <MX_GPIO_Init+0x1a0>)
 8000a16:	f000 fcdb 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <MX_GPIO_Init+0x1a4>)
 8000a2e:	f000 fccf 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_GPIO_Init+0x1a4>)
 8000a4a:	f000 fcc1 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_GPIO_Init+0x1a8>)
 8000a66:	f000 fcb3 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58020400 	.word	0x58020400
 8000a7c:	58021800 	.word	0x58021800
 8000a80:	58021000 	.word	0x58021000
 8000a84:	58020800 	.word	0x58020800

08000a88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a9a:	f000 fc21 	bl	80012e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aaa:	231f      	movs	r3, #31
 8000aac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aae:	2387      	movs	r3, #135	@ 0x87
 8000ab0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fc3f 	bl	8001350 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f000 fc1c 	bl	8001310 <HAL_MPU_Enable>

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x30>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x30>)
 8000b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58024400 	.word	0x58024400

08000b20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0bc      	sub	sp, #240	@ 0xf0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	22c0      	movs	r2, #192	@ 0xc0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 f9ce 	bl	8005ee2 <memset>
  if(huart->Instance==LPUART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c80 <HAL_UART_MspInit+0x160>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d147      	bne.n	8000be0 <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b50:	f04f 0204 	mov.w	r2, #4
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 ffac 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b72:	f7ff ffb5 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b76:	4b43      	ldr	r3, [pc, #268]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b7c:	4a41      	ldr	r2, [pc, #260]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b3b      	ldr	r3, [pc, #236]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000bb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <HAL_UART_MspInit+0x168>)
 8000bda:	f000 fbf9 	bl	80013d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bde:	e04b      	b.n	8000c78 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <HAL_UART_MspInit+0x16c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d146      	bne.n	8000c78 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bea:	f04f 0202 	mov.w	r2, #2
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 ff5f 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000c0c:	f7ff ff68 	bl	8000ae0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c16:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_UART_MspInit+0x164>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_TX_Pin|STLK_RX_Pin;
 8000c4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c66:	2307      	movs	r3, #7
 8000c68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <HAL_UART_MspInit+0x170>)
 8000c74:	f000 fbac 	bl	80013d0 <HAL_GPIO_Init>
}
 8000c78:	bf00      	nop
 8000c7a:	37f0      	adds	r7, #240	@ 0xf0
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58000c00 	.word	0x58000c00
 8000c84:	58024400 	.word	0x58024400
 8000c88:	58020000 	.word	0x58020000
 8000c8c:	40004800 	.word	0x40004800
 8000c90:	58020c00 	.word	0x58020c00

08000c94 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ba      	sub	sp, #232	@ 0xe8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22c0      	movs	r2, #192	@ 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 f914 	bl	8005ee2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <HAL_PCD_MspInit+0xcc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d149      	bne.n	8000d58 <HAL_PCD_MspInit+0xc4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000cd0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fef1 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000ce8:	f7ff fefa 	bl	8000ae0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000cec:	f000 fef4 	bl	8001ad8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d28:	230a      	movs	r3, #10
 8000d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d36:	f000 fb4b 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d40:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000d42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_PCD_MspInit+0xd0>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d58:	bf00      	nop
 8000d5a:	37e8      	adds	r7, #232	@ 0xe8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40080000 	.word	0x40080000
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020000 	.word	0x58020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f959 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <SystemInit+0x114>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd6:	4a42      	ldr	r2, [pc, #264]	@ (8000ee0 <SystemInit+0x114>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de0:	4b40      	ldr	r3, [pc, #256]	@ (8000ee4 <SystemInit+0x118>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	d807      	bhi.n	8000dfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee4 <SystemInit+0x118>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 030f 	bic.w	r3, r3, #15
 8000df4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee4 <SystemInit+0x118>)
 8000df6:	f043 0307 	orr.w	r3, r3, #7
 8000dfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <SystemInit+0x11c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <SystemInit+0x11c>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e08:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <SystemInit+0x11c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <SystemInit+0x11c>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4935      	ldr	r1, [pc, #212]	@ (8000ee8 <SystemInit+0x11c>)
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <SystemInit+0x120>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <SystemInit+0x118>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <SystemInit+0x118>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 030f 	bic.w	r3, r3, #15
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee4 <SystemInit+0x118>)
 8000e30:	f043 0307 	orr.w	r3, r3, #7
 8000e34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <SystemInit+0x11c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <SystemInit+0x11c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e42:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <SystemInit+0x11c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <SystemInit+0x11c>)
 8000e4a:	4a29      	ldr	r2, [pc, #164]	@ (8000ef0 <SystemInit+0x124>)
 8000e4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <SystemInit+0x11c>)
 8000e50:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <SystemInit+0x128>)
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <SystemInit+0x11c>)
 8000e56:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <SystemInit+0x12c>)
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <SystemInit+0x11c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <SystemInit+0x11c>)
 8000e62:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <SystemInit+0x12c>)
 8000e64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <SystemInit+0x11c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <SystemInit+0x11c>)
 8000e6e:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <SystemInit+0x12c>)
 8000e70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <SystemInit+0x11c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <SystemInit+0x11c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee8 <SystemInit+0x11c>)
 8000e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e84:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <SystemInit+0x11c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <SystemInit+0x130>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <SystemInit+0x134>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e96:	d202      	bcs.n	8000e9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <SystemInit+0x138>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <SystemInit+0x11c>)
 8000ea0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d113      	bne.n	8000ed4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <SystemInit+0x11c>)
 8000eae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <SystemInit+0x11c>)
 8000eb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <SystemInit+0x13c>)
 8000ebe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <SystemInit+0x11c>)
 8000ec6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <SystemInit+0x11c>)
 8000ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ed0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	52002000 	.word	0x52002000
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef0:	02020200 	.word	0x02020200
 8000ef4:	01ff0000 	.word	0x01ff0000
 8000ef8:	01010280 	.word	0x01010280
 8000efc:	5c001000 	.word	0x5c001000
 8000f00:	ffff0000 	.word	0xffff0000
 8000f04:	51008108 	.word	0x51008108
 8000f08:	52004000 	.word	0x52004000

08000f0c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <ExitRun0Mode+0x2c>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <ExitRun0Mode+0x2c>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f1c:	bf00      	nop
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <ExitRun0Mode+0x2c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f9      	beq.n	8000f1e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	58024800 	.word	0x58024800

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f78 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f40:	f7ff ffe4 	bl	8000f0c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff ff42 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f004 ffc1 	bl	8005ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fb47 	bl	8000604 <main>
  bx  lr
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f80:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f84:	08005f9c 	.word	0x08005f9c
  ldr r2, =_sbss
 8000f88:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f8c:	2400064c 	.word	0x2400064c

08000f90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC3_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f96e 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fa0:	f001 fbba 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_Init+0x68>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	4913      	ldr	r1, [pc, #76]	@ (8001000 <HAL_Init+0x6c>)
 8000fb2:	5ccb      	ldrb	r3, [r1, r3]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_Init+0x68>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_Init+0x6c>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_Init+0x70>)
 8000fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_Init+0x74>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f814 	bl	800100c <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f7ff fd7d 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	58024400 	.word	0x58024400
 8001000:	08005f54 	.word	0x08005f54
 8001004:	24000004 	.word	0x24000004
 8001008:	24000000 	.word	0x24000000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_InitTick+0x60>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e021      	b.n	8001064 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_InitTick+0x64>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_InitTick+0x60>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f945 	bl	80012c6 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f91d 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_InitTick+0x68>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2400000c 	.word	0x2400000c
 8001070:	24000000 	.word	0x24000000
 8001074:	24000008 	.word	0x24000008

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2400000c 	.word	0x2400000c
 800109c:	24000648 	.word	0x24000648

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	24000648 	.word	0x24000648

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c

08001100 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetREVID+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0c1b      	lsrs	r3, r3, #16
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	5c001000 	.word	0x5c001000

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	4313      	orrs	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <__NVIC_SetPriorityGrouping+0x40>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	05fa0000 	.word	0x05fa0000

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff47 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff5e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff90 	bl	80011d0 <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5f 	bl	800117c <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffb2 	bl	8001238 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e4:	f3bf 8f5f 	dmb	sy
}
 80012e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <HAL_MPU_Disable+0x28>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	4a06      	ldr	r2, [pc, #24]	@ (8001308 <HAL_MPU_Disable+0x28>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012f6:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_MPU_Disable+0x2c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	e000ed90 	.word	0xe000ed90

08001310 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <HAL_MPU_Enable+0x38>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_MPU_Enable+0x3c>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	4a09      	ldr	r2, [pc, #36]	@ (800134c <HAL_MPU_Enable+0x3c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800132e:	f3bf 8f4f 	dsb	sy
}
 8001332:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001334:	f3bf 8f6f 	isb	sy
}
 8001338:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed90 	.word	0xe000ed90
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	785a      	ldrb	r2, [r3, #1]
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_MPU_ConfigRegion+0x7c>)
 800135e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_MPU_ConfigRegion+0x7c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <HAL_MPU_ConfigRegion+0x7c>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_MPU_ConfigRegion+0x7c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7b1b      	ldrb	r3, [r3, #12]
 8001378:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7adb      	ldrb	r3, [r3, #11]
 800137e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7a9b      	ldrb	r3, [r3, #10]
 8001386:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b5b      	ldrb	r3, [r3, #13]
 800138e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7b9b      	ldrb	r3, [r3, #14]
 8001396:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001398:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7bdb      	ldrb	r3, [r3, #15]
 800139e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7a5b      	ldrb	r3, [r3, #9]
 80013a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7a1b      	ldrb	r3, [r3, #8]
 80013ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013bc:	6113      	str	r3, [r2, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed90 	.word	0xe000ed90

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013de:	4b89      	ldr	r3, [pc, #548]	@ (8001604 <HAL_GPIO_Init+0x234>)
 80013e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013e2:	e194      	b.n	800170e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8186 	beq.w	8001708 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d005      	beq.n	8001414 <HAL_GPIO_Init+0x44>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d130      	bne.n	8001476 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144a:	2201      	movs	r2, #1
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 0201 	and.w	r2, r3, #1
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b03      	cmp	r3, #3
 8001480:	d017      	beq.n	80014b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d123      	bne.n	8001506 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0203 	and.w	r2, r3, #3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80e0 	beq.w	8001708 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <HAL_GPIO_Init+0x238>)
 800154a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800154e:	4a2e      	ldr	r2, [pc, #184]	@ (8001608 <HAL_GPIO_Init+0x238>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <HAL_GPIO_Init+0x238>)
 800155a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001566:	4a29      	ldr	r2, [pc, #164]	@ (800160c <HAL_GPIO_Init+0x23c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a20      	ldr	r2, [pc, #128]	@ (8001610 <HAL_GPIO_Init+0x240>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d052      	beq.n	8001638 <HAL_GPIO_Init+0x268>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1f      	ldr	r2, [pc, #124]	@ (8001614 <HAL_GPIO_Init+0x244>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d031      	beq.n	80015fe <HAL_GPIO_Init+0x22e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <HAL_GPIO_Init+0x248>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x22a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_GPIO_Init+0x24c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001620 <HAL_GPIO_Init+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x222>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <HAL_GPIO_Init+0x254>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x21e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <HAL_GPIO_Init+0x258>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_GPIO_Init+0x25c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_GPIO_Init+0x260>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_GPIO_Init+0x264>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x20e>
 80015da:	2309      	movs	r3, #9
 80015dc:	e02d      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015de:	230a      	movs	r3, #10
 80015e0:	e02b      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015e2:	2308      	movs	r3, #8
 80015e4:	e029      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e027      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e025      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e023      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e021      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e01f      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e01d      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015fe:	2301      	movs	r3, #1
 8001600:	e01b      	b.n	800163a <HAL_GPIO_Init+0x26a>
 8001602:	bf00      	nop
 8001604:	58000080 	.word	0x58000080
 8001608:	58024400 	.word	0x58024400
 800160c:	58000400 	.word	0x58000400
 8001610:	58020000 	.word	0x58020000
 8001614:	58020400 	.word	0x58020400
 8001618:	58020800 	.word	0x58020800
 800161c:	58020c00 	.word	0x58020c00
 8001620:	58021000 	.word	0x58021000
 8001624:	58021400 	.word	0x58021400
 8001628:	58021800 	.word	0x58021800
 800162c:	58021c00 	.word	0x58021c00
 8001630:	58022000 	.word	0x58022000
 8001634:	58022400 	.word	0x58022400
 8001638:	2300      	movs	r3, #0
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164a:	4938      	ldr	r1, [pc, #224]	@ (800172c <HAL_GPIO_Init+0x35c>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f ae63 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	@ 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	58000400 	.word	0x58000400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e043      	b.n	80017fc <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800177c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001786:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6852      	ldr	r2, [r2, #4]
 8001790:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6892      	ldr	r2, [r2, #8]
 800179a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800179c:	f7ff fc80 	bl	80010a0 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80017a2:	e011      	b.n	80017c8 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80017a4:	f7ff fc7c 	bl	80010a0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f641 0201 	movw	r2, #6145	@ 0x1801
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d908      	bls.n	80017c8 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e019      	b.n	80017fc <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1e6      	bne.n	80017a4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d005      	beq.n	80017f0 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68d2      	ldr	r2, [r2, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	e004      	b.n	80017fa <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0fe      	b.n	8001a14 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fa32 	bl	8000c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 f8bb 	bl	80059b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7c1a      	ldrb	r2, [r3, #16]
 800184a:	f88d 2000 	strb.w	r2, [sp]
 800184e:	3304      	adds	r3, #4
 8001850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001852:	f004 f83f 	bl	80058d4 <USB_CoreInit>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d5      	b.n	8001a14 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f004 f8b3 	bl	80059da <USB_SetCurrentMode>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0c6      	b.n	8001a14 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e04a      	b.n	8001922 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3315      	adds	r3, #21
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3314      	adds	r3, #20
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	b298      	uxth	r0, r3
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	332e      	adds	r3, #46	@ 0x2e
 80018c8:	4602      	mov	r2, r0
 80018ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3318      	adds	r3, #24
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	331c      	adds	r3, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3320      	adds	r3, #32
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3324      	adds	r3, #36	@ 0x24
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	3301      	adds	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	791b      	ldrb	r3, [r3, #4]
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3af      	bcc.n	800188c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e044      	b.n	80019bc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3b5      	bcc.n	8001932 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7c1a      	ldrb	r2, [r3, #16]
 80019ce:	f88d 2000 	strb.w	r2, [sp]
 80019d2:	3304      	adds	r3, #4
 80019d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d6:	f004 f84d 	bl	8005a74 <USB_DevInit>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e013      	b.n	8001a14 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7b1b      	ldrb	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f80a 	bl	8001a1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 fa08 	bl	8005e22 <USB_DevDisconnect>

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	10000003 	.word	0x10000003

08001a64 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d00a      	beq.n	8001a8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e01f      	b.n	8001aca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e01d      	b.n	8001aca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	490f      	ldr	r1, [pc, #60]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a9e:	f7ff faff 	bl	80010a0 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001aa6:	f7ff fafb 	bl	80010a0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ab4:	d901      	bls.n	8001aba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e007      	b.n	8001aca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	58024800 	.word	0x58024800

08001ad8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	58024800 	.word	0x58024800

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 bc48 	b.w	800239c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8088 	beq.w	8001c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4b99      	ldr	r3, [pc, #612]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b24:	4b96      	ldr	r3, [pc, #600]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_OscConfig+0x48>
 8001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d111      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62>
 8001b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4b8f      	ldr	r3, [pc, #572]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d06d      	beq.n	8001c28 <HAL_RCC_OscConfig+0x130>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d169      	bne.n	8001c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f000 bc21 	b.w	800239c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x7a>
 8001b64:	4b86      	ldr	r3, [pc, #536]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a85      	ldr	r2, [pc, #532]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e02e      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x9c>
 8001b7a:	4b81      	ldr	r3, [pc, #516]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a80      	ldr	r2, [pc, #512]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b7e      	ldr	r3, [pc, #504]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a77      	ldr	r2, [pc, #476]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a74      	ldr	r2, [pc, #464]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd8>
 8001bb8:	4b71      	ldr	r3, [pc, #452]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a70      	ldr	r2, [pc, #448]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b6e      	ldr	r3, [pc, #440]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6d      	ldr	r2, [pc, #436]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fa62 	bl	80010a0 <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fa5e 	bl	80010a0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e3d4      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe8>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fa4e 	bl	80010a0 <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fa4a 	bl	80010a0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e3c0      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x110>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80ca 	beq.w	8001dcc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c38:	4b51      	ldr	r3, [pc, #324]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c42:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_RCC_OscConfig+0x166>
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	2b18      	cmp	r3, #24
 8001c52:	d156      	bne.n	8001d02 <HAL_RCC_OscConfig+0x20a>
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d151      	bne.n	8001d02 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5e:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e392      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c76:	4b42      	ldr	r3, [pc, #264]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0219 	bic.w	r2, r3, #25
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	493f      	ldr	r1, [pc, #252]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fa0a 	bl	80010a0 <HAL_GetTick>
 8001c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fa06 	bl	80010a0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e37c      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	f7ff fa27 	bl	8001100 <HAL_GetREVID>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d817      	bhi.n	8001cec <HAL_RCC_OscConfig+0x1f4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b40      	cmp	r3, #64	@ 0x40
 8001cc2:	d108      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x1de>
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	e07a      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	031b      	lsls	r3, r3, #12
 8001ce4:	4926      	ldr	r1, [pc, #152]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cea:	e06f      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4921      	ldr	r1, [pc, #132]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	e064      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d047      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0219 	bic.w	r2, r3, #25
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	491a      	ldr	r1, [pc, #104]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9c0 	bl	80010a0 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff f9bc 	bl	80010a0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e332      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	f7ff f9dd 	bl	8001100 <HAL_GetREVID>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d819      	bhi.n	8001d84 <HAL_RCC_OscConfig+0x28c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b40      	cmp	r3, #64	@ 0x40
 8001d56:	d108      	bne.n	8001d6a <HAL_RCC_OscConfig+0x272>
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d66:	6053      	str	r3, [r2, #4]
 8001d68:	e030      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	031b      	lsls	r3, r3, #12
 8001d78:	4901      	ldr	r1, [pc, #4]	@ (8001d80 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	e025      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
 8001d80:	58024400 	.word	0x58024400
 8001d84:	4b9a      	ldr	r3, [pc, #616]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	4997      	ldr	r1, [pc, #604]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e018      	b.n	8001dcc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	4b95      	ldr	r3, [pc, #596]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a94      	ldr	r2, [pc, #592]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f97b 	bl	80010a0 <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff f977 	bl	80010a0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e2ed      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dc0:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a9 	beq.w	8001f2c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001de2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001de4:	4b82      	ldr	r3, [pc, #520]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d007      	beq.n	8001e00 <HAL_RCC_OscConfig+0x308>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b18      	cmp	r3, #24
 8001df4:	d13a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x374>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d135      	bne.n	8001e6c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e00:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x320>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e2c1      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e18:	f7ff f972 	bl	8001100 <HAL_GetREVID>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d817      	bhi.n	8001e56 <HAL_RCC_OscConfig+0x35e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x348>
 8001e2e:	4b70      	ldr	r3, [pc, #448]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e36:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e3c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e3e:	e075      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	069b      	lsls	r3, r3, #26
 8001e4e:	4968      	ldr	r1, [pc, #416]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e54:	e06a      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e56:	4b66      	ldr	r3, [pc, #408]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	4962      	ldr	r1, [pc, #392]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e6a:	e05f      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d042      	beq.n	8001efa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f90e 	bl	80010a0 <HAL_GetTick>
 8001e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e88:	f7ff f90a 	bl	80010a0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e280      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ea6:	f7ff f92b 	bl	8001100 <HAL_GetREVID>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d817      	bhi.n	8001ee4 <HAL_RCC_OscConfig+0x3ec>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d108      	bne.n	8001ece <HAL_RCC_OscConfig+0x3d6>
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001eca:	6053      	str	r3, [r2, #4]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
 8001ece:	4b48      	ldr	r3, [pc, #288]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	069b      	lsls	r3, r3, #26
 8001edc:	4944      	ldr	r1, [pc, #272]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
 8001ee2:	e023      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
 8001ee4:	4b42      	ldr	r3, [pc, #264]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	493f      	ldr	r1, [pc, #252]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e018      	b.n	8001f2c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001efa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f8cb 	bl	80010a0 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f8c7 	bl	80010a0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e23d      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f20:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d036      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d019      	beq.n	8001f74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f44:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f8a8 	bl	80010a0 <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff f8a4 	bl	80010a0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e21a      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x45c>
 8001f72:	e018      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f88e 	bl	80010a0 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f88a 	bl	80010a0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e200      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d039      	beq.n	8002026 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f86b 	bl	80010a0 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fce:	f7ff f867 	bl	80010a0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1dd      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x4d6>
 8001fec:	e01b      	b.n	8002026 <HAL_RCC_OscConfig+0x52e>
 8001fee:	bf00      	nop
 8001ff0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ff4:	4b9b      	ldr	r3, [pc, #620]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a9a      	ldr	r2, [pc, #616]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002000:	f7ff f84e 	bl	80010a0 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002008:	f7ff f84a 	bl	80010a0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1c0      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800201a:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8081 	beq.w	8002136 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002034:	4b8c      	ldr	r3, [pc, #560]	@ (8002268 <HAL_RCC_OscConfig+0x770>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a8b      	ldr	r2, [pc, #556]	@ (8002268 <HAL_RCC_OscConfig+0x770>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002040:	f7ff f82e 	bl	80010a0 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7ff f82a 	bl	80010a0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1a0      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205a:	4b83      	ldr	r3, [pc, #524]	@ (8002268 <HAL_RCC_OscConfig+0x770>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x584>
 800206e:	4b7d      	ldr	r3, [pc, #500]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a7c      	ldr	r2, [pc, #496]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
 800207a:	e02d      	b.n	80020d8 <HAL_RCC_OscConfig+0x5e0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x5a6>
 8002084:	4b77      	ldr	r3, [pc, #476]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a76      	ldr	r2, [pc, #472]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002090:	4b74      	ldr	r3, [pc, #464]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002094:	4a73      	ldr	r2, [pc, #460]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002096:	f023 0304 	bic.w	r3, r3, #4
 800209a:	6713      	str	r3, [r2, #112]	@ 0x70
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x5e0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c8>
 80020a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x5e0>
 80020c0:	4b68      	ldr	r3, [pc, #416]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a67      	ldr	r2, [pc, #412]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80020cc:	4b65      	ldr	r3, [pc, #404]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d0:	4a64      	ldr	r2, [pc, #400]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe ffde 	bl	80010a0 <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7fe ffda 	bl	80010a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e14e      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fe:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ee      	beq.n	80020e8 <HAL_RCC_OscConfig+0x5f0>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe ffc8 	bl	80010a0 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7fe ffc4 	bl	80010a0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e138      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800212a:	4b4e      	ldr	r3, [pc, #312]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ee      	bne.n	8002114 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 812d 	beq.w	800239a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002140:	4b48      	ldr	r3, [pc, #288]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002148:	2b18      	cmp	r3, #24
 800214a:	f000 80bd 	beq.w	80022c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 809e 	bne.w	8002294 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b42      	ldr	r3, [pc, #264]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a41      	ldr	r2, [pc, #260]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800215e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ff9c 	bl	80010a0 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe ff98 	bl	80010a0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e10e      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218e:	4b37      	ldr	r3, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x774>)
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	4931      	ldr	r1, [pc, #196]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	3b01      	subs	r3, #1
 80021aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b2:	3b01      	subs	r3, #1
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	3b01      	subs	r3, #1
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80021d4:	4923      	ldr	r1, [pc, #140]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021da:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <HAL_RCC_OscConfig+0x778>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	491b      	ldr	r1, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f023 020c 	bic.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	4917      	ldr	r1, [pc, #92]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002208:	4313      	orrs	r3, r2
 800220a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f023 0202 	bic.w	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	4912      	ldr	r1, [pc, #72]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_RCC_OscConfig+0x76c>)
 8002254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe ff21 	bl	80010a0 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002260:	e011      	b.n	8002286 <HAL_RCC_OscConfig+0x78e>
 8002262:	bf00      	nop
 8002264:	58024400 	.word	0x58024400
 8002268:	58024800 	.word	0x58024800
 800226c:	fffffc0c 	.word	0xfffffc0c
 8002270:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe ff14 	bl	80010a0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e08a      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x77c>
 8002292:	e082      	b.n	800239a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a42      	ldr	r2, [pc, #264]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fefe 	bl	80010a0 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fefa 	bl	80010a0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e070      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ba:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x7b0>
 80022c6:	e068      	b.n	800239a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022ce:	4b35      	ldr	r3, [pc, #212]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d031      	beq.n	8002340 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0203 	and.w	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d12a      	bne.n	8002340 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d122      	bne.n	8002340 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002316:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0e1b      	lsrs	r3, r3, #24
 8002332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e02b      	b.n	800239c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002344:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800234e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	429a      	cmp	r2, r3
 8002358:	d01f      	beq.n	800239a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002366:	f7fe fe9b 	bl	80010a0 <HAL_GetTick>
 800236a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800236c:	bf00      	nop
 800236e:	f7fe fe97 	bl	80010a0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	4293      	cmp	r3, r2
 8002378:	d0f9      	beq.n	800236e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 800237c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_RCC_OscConfig+0x8b0>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002386:	00d2      	lsls	r2, r2, #3
 8002388:	4906      	ldr	r1, [pc, #24]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 800238a:	4313      	orrs	r3, r2
 800238c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_RCC_OscConfig+0x8ac>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3730      	adds	r7, #48	@ 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58024400 	.word	0x58024400
 80023a8:	ffff0007 	.word	0xffff0007

080023ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e19c      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b8a      	ldr	r3, [pc, #552]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d910      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b87      	ldr	r3, [pc, #540]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	4985      	ldr	r1, [pc, #532]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b83      	ldr	r3, [pc, #524]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e184      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d010      	beq.n	800241e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	4b7b      	ldr	r3, [pc, #492]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002408:	429a      	cmp	r2, r3
 800240a:	d908      	bls.n	800241e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800240c:	4b78      	ldr	r3, [pc, #480]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4975      	ldr	r1, [pc, #468]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800241a:	4313      	orrs	r3, r2
 800241c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002436:	429a      	cmp	r2, r3
 8002438:	d908      	bls.n	800244c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800243a:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	496a      	ldr	r1, [pc, #424]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002448:	4313      	orrs	r3, r2
 800244a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d010      	beq.n	800247a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002464:	429a      	cmp	r2, r3
 8002466:	d908      	bls.n	800247a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	495e      	ldr	r1, [pc, #376]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002476:	4313      	orrs	r3, r2
 8002478:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	4b59      	ldr	r3, [pc, #356]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002492:	429a      	cmp	r2, r3
 8002494:	d908      	bls.n	80024a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002496:	4b56      	ldr	r3, [pc, #344]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4953      	ldr	r1, [pc, #332]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d908      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f023 020f 	bic.w	r2, r3, #15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4947      	ldr	r1, [pc, #284]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d055      	beq.n	800258e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024e2:	4b43      	ldr	r3, [pc, #268]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4940      	ldr	r1, [pc, #256]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fc:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d121      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0f6      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d115      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0ea      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0de      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253c:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0d6      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 0207 	bic.w	r2, r3, #7
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4925      	ldr	r1, [pc, #148]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800255a:	4313      	orrs	r3, r2
 800255c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255e:	f7fe fd9f 	bl	80010a0 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002564:	e00a      	b.n	800257c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7fe fd9b 	bl	80010a0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0be      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	429a      	cmp	r2, r3
 800258c:	d1eb      	bne.n	8002566 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d208      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	490e      	ldr	r1, [pc, #56]	@ (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d214      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 020f 	bic.w	r2, r3, #15
 80025d2:	4906      	ldr	r1, [pc, #24]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <HAL_RCC_ClockConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e086      	b.n	80026fa <HAL_RCC_ClockConfig+0x34e>
 80025ec:	52002000 	.word	0x52002000
 80025f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	4b3f      	ldr	r3, [pc, #252]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800260c:	429a      	cmp	r2, r3
 800260e:	d208      	bcs.n	8002622 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002610:	4b3c      	ldr	r3, [pc, #240]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4939      	ldr	r1, [pc, #228]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 800261e:	4313      	orrs	r3, r2
 8002620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800263a:	429a      	cmp	r2, r3
 800263c:	d208      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	492e      	ldr	r1, [pc, #184]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d010      	beq.n	800267e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002668:	429a      	cmp	r2, r3
 800266a:	d208      	bcs.n	800267e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4922      	ldr	r1, [pc, #136]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 800267a:	4313      	orrs	r3, r2
 800267c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002696:	429a      	cmp	r2, r3
 8002698:	d208      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800269a:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4917      	ldr	r1, [pc, #92]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026ac:	f000 f834 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	4912      	ldr	r1, [pc, #72]	@ (8002708 <HAL_RCC_ClockConfig+0x35c>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_RCC_ClockConfig+0x35c>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x360>)
 80026e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_RCC_ClockConfig+0x364>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_RCC_ClockConfig+0x368>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc8c 	bl	800100c <HAL_InitTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
 8002708:	08005f54 	.word	0x08005f54
 800270c:	24000004 	.word	0x24000004
 8002710:	24000000 	.word	0x24000000
 8002714:	24000008 	.word	0x24000008

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271e:	4bb3      	ldr	r3, [pc, #716]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002726:	2b18      	cmp	r3, #24
 8002728:	f200 8155 	bhi.w	80029d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800272c:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <HAL_RCC_GetSysClockFreq+0x1c>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002799 	.word	0x08002799
 8002738:	080029d7 	.word	0x080029d7
 800273c:	080029d7 	.word	0x080029d7
 8002740:	080029d7 	.word	0x080029d7
 8002744:	080029d7 	.word	0x080029d7
 8002748:	080029d7 	.word	0x080029d7
 800274c:	080029d7 	.word	0x080029d7
 8002750:	080029d7 	.word	0x080029d7
 8002754:	080027bf 	.word	0x080027bf
 8002758:	080029d7 	.word	0x080029d7
 800275c:	080029d7 	.word	0x080029d7
 8002760:	080029d7 	.word	0x080029d7
 8002764:	080029d7 	.word	0x080029d7
 8002768:	080029d7 	.word	0x080029d7
 800276c:	080029d7 	.word	0x080029d7
 8002770:	080029d7 	.word	0x080029d7
 8002774:	080027c5 	.word	0x080027c5
 8002778:	080029d7 	.word	0x080029d7
 800277c:	080029d7 	.word	0x080029d7
 8002780:	080029d7 	.word	0x080029d7
 8002784:	080029d7 	.word	0x080029d7
 8002788:	080029d7 	.word	0x080029d7
 800278c:	080029d7 	.word	0x080029d7
 8002790:	080029d7 	.word	0x080029d7
 8002794:	080027cb 	.word	0x080027cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002798:	4b94      	ldr	r3, [pc, #592]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027a4:	4b91      	ldr	r3, [pc, #580]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	4a90      	ldr	r2, [pc, #576]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027b6:	e111      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027b8:	4b8d      	ldr	r3, [pc, #564]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027ba:	61bb      	str	r3, [r7, #24]
      break;
 80027bc:	e10e      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027be:	4b8d      	ldr	r3, [pc, #564]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027c0:	61bb      	str	r3, [r7, #24]
      break;
 80027c2:	e10b      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027c4:	4b8c      	ldr	r3, [pc, #560]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027c6:	61bb      	str	r3, [r7, #24]
      break;
 80027c8:	e108      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027ca:	4b88      	ldr	r3, [pc, #544]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027d4:	4b85      	ldr	r3, [pc, #532]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027e0:	4b82      	ldr	r3, [pc, #520]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027ea:	4b80      	ldr	r3, [pc, #512]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	08db      	lsrs	r3, r3, #3
 80027f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002802:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80e1 	beq.w	80029d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b02      	cmp	r3, #2
 8002812:	f000 8083 	beq.w	800291c <HAL_RCC_GetSysClockFreq+0x204>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b02      	cmp	r3, #2
 800281a:	f200 80a1 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x248>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x114>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d056      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800282a:	e099      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800282c:	4b6f      	ldr	r3, [pc, #444]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02d      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002838:	4b6c      	ldr	r3, [pc, #432]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	4a6b      	ldr	r2, [pc, #428]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002862:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002872:	ed97 6a02 	vldr	s12, [r7, #8]
 8002876:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80029fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800287a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800287e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002892:	e087      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a00 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a6:	4b51      	ldr	r3, [pc, #324]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80029fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80028be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028d6:	e065      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ea:	4b40      	ldr	r3, [pc, #256]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80029fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800290a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800291a:	e043      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2f0>
 800292a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292e:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002942:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80029fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800294a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295e:	e021      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002982:	ed97 6a02 	vldr	s12, [r7, #8]
 8002986:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80029fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800298a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ae:	3301      	adds	r3, #1
 80029b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80029c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029ce:	e005      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
      break;
 80029d4:	e002      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029d8:	61bb      	str	r3, [r7, #24]
      break;
 80029da:	bf00      	nop
  }

  return sysclockfreq;
 80029dc:	69bb      	ldr	r3, [r7, #24]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	03d09000 	.word	0x03d09000
 80029f4:	003d0900 	.word	0x003d0900
 80029f8:	017d7840 	.word	0x017d7840
 80029fc:	46000000 	.word	0x46000000
 8002a00:	4c742400 	.word	0x4c742400
 8002a04:	4a742400 	.word	0x4a742400
 8002a08:	4bbebc20 	.word	0x4bbebc20

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a12:	f7ff fe81 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490f      	ldr	r1, [pc, #60]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a4a:	4a07      	ldr	r2, [pc, #28]	@ (8002a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	08005f54 	.word	0x08005f54
 8002a64:	24000004 	.word	0x24000004
 8002a68:	24000000 	.word	0x24000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a70:	f7ff ffcc 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	58024400 	.word	0x58024400
 8002a94:	08005f54 	.word	0x08005f54

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a9c:	f7ff ffb6 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	08005f54 	.word	0x08005f54

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b0ca      	sub	sp, #296	@ 0x128
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ae8:	2500      	movs	r5, #0
 8002aea:	ea54 0305 	orrs.w	r3, r4, r5
 8002aee:	d049      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002afa:	d02f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002afc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b00:	d828      	bhi.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b06:	d01a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b0c:	d822      	bhi.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b16:	d007      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b18:	e01c      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1a:	4bb8      	ldr	r3, [pc, #736]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	4ab7      	ldr	r2, [pc, #732]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b26:	e01a      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fc8f 	bl	8004454 <RCCEx_PLL2_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b3c:	e00f      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	3328      	adds	r3, #40	@ 0x28
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fd36 	bl	80045b8 <RCCEx_PLL3_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b52:	e004      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b66:	4ba5      	ldr	r3, [pc, #660]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b74:	4aa1      	ldr	r2, [pc, #644]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002b90:	f04f 0900 	mov.w	r9, #0
 8002b94:	ea58 0309 	orrs.w	r3, r8, r9
 8002b98:	d047      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d82a      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bc1 	.word	0x08002bc1
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002be5 	.word	0x08002be5
 8002bb8:	08002c03 	.word	0x08002c03
 8002bbc:	08002c03 	.word	0x08002c03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	4a8d      	ldr	r2, [pc, #564]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bcc:	e01a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 fc3c 	bl	8004454 <RCCEx_PLL2_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be2:	e00f      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be8:	3328      	adds	r3, #40	@ 0x28
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 fce3 	bl	80045b8 <RCCEx_PLL3_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bf8:	e004      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c10:	f023 0107 	bic.w	r1, r3, #7
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	4a78      	ldr	r2, [pc, #480]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c20:	e003      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c36:	f04f 0b00 	mov.w	fp, #0
 8002c3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c3e:	d04c      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4a:	d030      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c50:	d829      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c54:	d02d      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c58:	d825      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c5a:	2b80      	cmp	r3, #128	@ 0x80
 8002c5c:	d018      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c5e:	2b80      	cmp	r3, #128	@ 0x80
 8002c60:	d821      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d007      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6c:	4b63      	ldr	r3, [pc, #396]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	4a62      	ldr	r2, [pc, #392]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7e:	3308      	adds	r3, #8
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fbe6 	bl	8004454 <RCCEx_PLL2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c8e:	e011      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c94:	3328      	adds	r3, #40	@ 0x28
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f001 fc8d 	bl	80045b8 <RCCEx_PLL3_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	4a4c      	ldr	r2, [pc, #304]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cd0:	e003      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002ce6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cf0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	d053      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d06:	d035      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d0c:	d82e      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d12:	d031      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d18:	d828      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d1e:	d01a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d24:	d822      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	3308      	adds	r3, #8
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fb83 	bl	8004454 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d54:	e011      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	3328      	adds	r3, #40	@ 0x28
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fc2a 	bl	80045b8 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d6a:	e006      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d74:	bf00      	nop
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002dae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002db8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	d056      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002dca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dce:	d038      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dd4:	d831      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dda:	d034      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002de0:	d82b      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de6:	d01d      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dec:	d825      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002df8:	e01f      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dfa:	bf00      	nop
 8002dfc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4ba2      	ldr	r3, [pc, #648]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	4aa1      	ldr	r2, [pc, #644]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e12:	3308      	adds	r3, #8
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fb1c 	bl	8004454 <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e28:	3328      	adds	r3, #40	@ 0x28
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fbc3 	bl	80045b8 <RCCEx_PLL3_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e50:	4b8e      	ldr	r3, [pc, #568]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e60:	4a8a      	ldr	r2, [pc, #552]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e66:	e003      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	d03a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	2b30      	cmp	r3, #48	@ 0x30
 8002e98:	d01f      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002e9a:	2b30      	cmp	r3, #48	@ 0x30
 8002e9c:	d819      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d00c      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d815      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d019      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d111      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eae:	4b77      	ldr	r3, [pc, #476]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4a76      	ldr	r2, [pc, #472]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fac5 	bl	8004454 <RCCEx_PLL2_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ed0:	e006      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ee8:	4b68      	ldr	r3, [pc, #416]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4a65      	ldr	r2, [pc, #404]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efc:	e003      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4313      	orrs	r3, r2
 8002f24:	d051      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f30:	d035      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f36:	d82e      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f3c:	d031      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f42:	d828      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f48:	d01a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f4e:	d822      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f58:	d007      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f5a:	e01c      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fa6e 	bl	8004454 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f7e:	e011      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f84:	3328      	adds	r3, #40	@ 0x28
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fb15 	bl	80045b8 <RCCEx_PLL3_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f9c:	e002      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fac:	4b37      	ldr	r3, [pc, #220]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	4a34      	ldr	r2, [pc, #208]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fc0:	e003      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002fe0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	d056      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ff4:	d033      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ff6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ffa:	d82c      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ffc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003000:	d02f      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003006:	d826      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800300c:	d02b      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800300e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003012:	d820      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003018:	d012      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800301a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800301e:	d81a      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d022      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d115      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	3308      	adds	r3, #8
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fa0e 	bl	8004454 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800303e:	e015      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fab5 	bl	80045b8 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003054:	e00a      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800305c:	e006      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800306a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003080:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003082:	4a02      	ldr	r2, [pc, #8]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003084:	430b      	orrs	r3, r1
 8003086:	6513      	str	r3, [r2, #80]	@ 0x50
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800308a:	bf00      	nop
 800308c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	d055      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c4:	d033      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ca:	d82c      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d02f      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d6:	d826      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030dc:	d02b      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030e2:	d820      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e8:	d012      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80030ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ee:	d81a      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d022      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80030f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030f8:	d115      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	3308      	adds	r3, #8
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f001 f9a6 	bl	8004454 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800310e:	e015      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	3328      	adds	r3, #40	@ 0x28
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f001 fa4d 	bl	80045b8 <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800312e:	bf00      	nop
 8003130:	e004      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003144:	4ba3      	ldr	r3, [pc, #652]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003154:	4a9f      	ldr	r2, [pc, #636]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003156:	430b      	orrs	r3, r1
 8003158:	6593      	str	r3, [r2, #88]	@ 0x58
 800315a:	e003      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800317a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800317e:	460b      	mov	r3, r1
 8003180:	4313      	orrs	r3, r2
 8003182:	d037      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800318e:	d00e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d816      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800319a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800319e:	d111      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a0:	4b8c      	ldr	r3, [pc, #560]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	4a8b      	ldr	r2, [pc, #556]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031ac:	e00f      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b2:	3308      	adds	r3, #8
 80031b4:	2101      	movs	r1, #1
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 f94c 	bl	8004454 <RCCEx_PLL2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c2:	e004      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031d6:	4b7f      	ldr	r3, [pc, #508]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a7b      	ldr	r2, [pc, #492]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ea:	e003      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800320a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800320e:	460b      	mov	r3, r1
 8003210:	4313      	orrs	r3, r2
 8003212:	d039      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321a:	2b03      	cmp	r3, #3
 800321c:	d81c      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003261 	.word	0x08003261
 8003228:	08003235 	.word	0x08003235
 800322c:	08003243 	.word	0x08003243
 8003230:	08003261 	.word	0x08003261
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003234:	4b67      	ldr	r3, [pc, #412]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4a66      	ldr	r2, [pc, #408]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003240:	e00f      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	3308      	adds	r3, #8
 8003248:	2102      	movs	r1, #2
 800324a:	4618      	mov	r0, r3
 800324c:	f001 f902 	bl	8004454 <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003256:	e004      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800326a:	4b5a      	ldr	r3, [pc, #360]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	f023 0103 	bic.w	r1, r3, #3
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	4a56      	ldr	r2, [pc, #344]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327a:	430b      	orrs	r3, r1
 800327c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327e:	e003      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800329e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032a2:	460b      	mov	r3, r1
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f000 809f 	beq.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032aa:	4b4b      	ldr	r3, [pc, #300]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4a      	ldr	r2, [pc, #296]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b6:	f7fd fef3 	bl	80010a0 <HAL_GetTick>
 80032ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032be:	e00b      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fd feee 	bl	80010a0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	@ 0x64
 80032ce:	d903      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d6:	e005      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d8:	4b3f      	ldr	r3, [pc, #252]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ed      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80032e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d179      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032ec:	4b39      	ldr	r3, [pc, #228]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032f8:	4053      	eors	r3, r2
 80032fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d015      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003302:	4b34      	ldr	r3, [pc, #208]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800330e:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800331a:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331e:	4a2d      	ldr	r2, [pc, #180]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003324:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333a:	d118      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd feb0 	bl	80010a0 <HAL_GetTick>
 8003340:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003344:	e00d      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd feab 	bl	80010a0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003356:	429a      	cmp	r2, r3
 8003358:	d903      	bls.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003360:	e005      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0eb      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800336e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003372:	2b00      	cmp	r3, #0
 8003374:	d129      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003386:	d10e      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003394:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003398:	091a      	lsrs	r2, r3, #4
 800339a:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800339c:	4013      	ands	r3, r2
 800339e:	4a0d      	ldr	r2, [pc, #52]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6113      	str	r3, [r2, #16]
 80033a4:	e005      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033a6:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033b0:	6113      	str	r3, [r2, #16]
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	4a04      	ldr	r2, [pc, #16]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	e00e      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80033d2:	e009      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58024800 	.word	0x58024800
 80033dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 0301 	and.w	r3, r2, #1
 80033f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003402:	460b      	mov	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	f000 8089 	beq.w	800351c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003410:	2b28      	cmp	r3, #40	@ 0x28
 8003412:	d86b      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	080034f5 	.word	0x080034f5
 8003420:	080034ed 	.word	0x080034ed
 8003424:	080034ed 	.word	0x080034ed
 8003428:	080034ed 	.word	0x080034ed
 800342c:	080034ed 	.word	0x080034ed
 8003430:	080034ed 	.word	0x080034ed
 8003434:	080034ed 	.word	0x080034ed
 8003438:	080034ed 	.word	0x080034ed
 800343c:	080034c1 	.word	0x080034c1
 8003440:	080034ed 	.word	0x080034ed
 8003444:	080034ed 	.word	0x080034ed
 8003448:	080034ed 	.word	0x080034ed
 800344c:	080034ed 	.word	0x080034ed
 8003450:	080034ed 	.word	0x080034ed
 8003454:	080034ed 	.word	0x080034ed
 8003458:	080034ed 	.word	0x080034ed
 800345c:	080034d7 	.word	0x080034d7
 8003460:	080034ed 	.word	0x080034ed
 8003464:	080034ed 	.word	0x080034ed
 8003468:	080034ed 	.word	0x080034ed
 800346c:	080034ed 	.word	0x080034ed
 8003470:	080034ed 	.word	0x080034ed
 8003474:	080034ed 	.word	0x080034ed
 8003478:	080034ed 	.word	0x080034ed
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034ed 	.word	0x080034ed
 8003484:	080034ed 	.word	0x080034ed
 8003488:	080034ed 	.word	0x080034ed
 800348c:	080034ed 	.word	0x080034ed
 8003490:	080034ed 	.word	0x080034ed
 8003494:	080034ed 	.word	0x080034ed
 8003498:	080034ed 	.word	0x080034ed
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034ed 	.word	0x080034ed
 80034a4:	080034ed 	.word	0x080034ed
 80034a8:	080034ed 	.word	0x080034ed
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	080034ed 	.word	0x080034ed
 80034b4:	080034ed 	.word	0x080034ed
 80034b8:	080034ed 	.word	0x080034ed
 80034bc:	080034f5 	.word	0x080034f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	3308      	adds	r3, #8
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 ffc3 	bl	8004454 <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034d4:	e00f      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	3328      	adds	r3, #40	@ 0x28
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f86a 	bl	80045b8 <RCCEx_PLL3_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034ea:	e004      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80034f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034fe:	4bbf      	ldr	r3, [pc, #764]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800350c:	4abb      	ldr	r2, [pc, #748]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800350e:	430b      	orrs	r3, r1
 8003510:	6553      	str	r3, [r2, #84]	@ 0x54
 8003512:	e003      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 0302 	and.w	r3, r2, #2
 8003528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003532:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d041      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003542:	2b05      	cmp	r3, #5
 8003544:	d824      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003546:	a201      	add	r2, pc, #4	@ (adr r2, 800354c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003599 	.word	0x08003599
 8003550:	08003565 	.word	0x08003565
 8003554:	0800357b 	.word	0x0800357b
 8003558:	08003599 	.word	0x08003599
 800355c:	08003599 	.word	0x08003599
 8003560:	08003599 	.word	0x08003599
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3308      	adds	r3, #8
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 ff71 	bl	8004454 <RCCEx_PLL2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003578:	e00f      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	3328      	adds	r3, #40	@ 0x28
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f818 	bl	80045b8 <RCCEx_PLL3_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800358e:	e004      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003596:	e000      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035a2:	4b96      	ldr	r3, [pc, #600]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f023 0107 	bic.w	r1, r3, #7
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035b0:	4a92      	ldr	r2, [pc, #584]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 0304 	and.w	r3, r2, #4
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d044      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d825      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003641 	.word	0x08003641
 80035f8:	0800360d 	.word	0x0800360d
 80035fc:	08003623 	.word	0x08003623
 8003600:	08003641 	.word	0x08003641
 8003604:	08003641 	.word	0x08003641
 8003608:	08003641 	.word	0x08003641
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	3308      	adds	r3, #8
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f000 ff1d 	bl	8004454 <RCCEx_PLL2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003620:	e00f      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	3328      	adds	r3, #40	@ 0x28
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ffc4 	bl	80045b8 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003636:	e004      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800364a:	4b6c      	ldr	r3, [pc, #432]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	f023 0107 	bic.w	r1, r3, #7
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800365a:	4a68      	ldr	r2, [pc, #416]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f002 0320 	and.w	r3, r2, #32
 8003676:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003684:	460b      	mov	r3, r1
 8003686:	4313      	orrs	r3, r2
 8003688:	d055      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003696:	d033      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369c:	d82c      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d02f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d826      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036ae:	d02b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036b4:	d820      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ba:	d012      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c0:	d81a      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d022      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ca:	d115      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 febd 	bl	8004454 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036e0:	e015      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 ff64 	bl	80045b8 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036f6:	e00a      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036fe:	e006      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003700:	bf00      	nop
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003704:	bf00      	nop
 8003706:	e002      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003726:	4a35      	ldr	r2, [pc, #212]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003728:	430b      	orrs	r3, r1
 800372a:	6553      	str	r3, [r2, #84]	@ 0x54
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800374c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d058      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800375e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003762:	d033      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003764:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003768:	d82c      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376e:	d02f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003774:	d826      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003776:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800377a:	d02b      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800377c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003780:	d820      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003786:	d012      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378c:	d81a      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d022      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003796:	d115      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379c:	3308      	adds	r3, #8
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fe57 	bl	8004454 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037ac:	e015      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3328      	adds	r3, #40	@ 0x28
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fefe 	bl	80045b8 <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c2:	e00a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ca:	e006      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037cc:	bf00      	nop
 80037ce:	e004      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037d0:	bf00      	nop
 80037d2:	e002      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037f2:	4a02      	ldr	r2, [pc, #8]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800381e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003822:	460b      	mov	r3, r1
 8003824:	4313      	orrs	r3, r2
 8003826:	d055      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003830:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003834:	d033      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003836:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800383a:	d82c      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003840:	d02f      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003846:	d826      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003848:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800384c:	d02b      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800384e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003852:	d820      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003858:	d012      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800385a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800385e:	d81a      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d022      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003868:	d115      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3308      	adds	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fdee 	bl	8004454 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800387e:	e015      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	3328      	adds	r3, #40	@ 0x28
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fe95 	bl	80045b8 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003894:	e00a      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800389e:	bf00      	nop
 80038a0:	e004      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038b4:	4ba1      	ldr	r3, [pc, #644]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038c4:	4a9d      	ldr	r2, [pc, #628]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ca:	e003      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f002 0308 	and.w	r3, r2, #8
 80038e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d01e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003900:	d10c      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3328      	adds	r3, #40	@ 0x28
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fe54 	bl	80045b8 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800391c:	4b87      	ldr	r3, [pc, #540]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392c:	4a83      	ldr	r2, [pc, #524]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f002 0310 	and.w	r3, r2, #16
 800393e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003948:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d01e      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800395a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395e:	d10c      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	3328      	adds	r3, #40	@ 0x28
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fe25 	bl	80045b8 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800397a:	4b70      	ldr	r3, [pc, #448]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800398a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d03e      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039bc:	d022      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c2:	d81b      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039ce:	e015      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	3308      	adds	r3, #8
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fd3b 	bl	8004454 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039e4:	e00f      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3328      	adds	r3, #40	@ 0x28
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fde2 	bl	80045b8 <RCCEx_PLL3_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039fa:	e004      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a1e:	4a47      	ldr	r2, [pc, #284]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a24:	e003      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a44:	460b      	mov	r3, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	d03b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a56:	d01f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a5c:	d818      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a62:	d003      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a68:	d007      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a6a:	e011      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6c:	4b33      	ldr	r3, [pc, #204]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a78:	e00f      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	3328      	adds	r3, #40	@ 0x28
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fd98 	bl	80045b8 <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a8e:	e004      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aa2:	4b26      	ldr	r3, [pc, #152]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	4a22      	ldr	r2, [pc, #136]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ace:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ad4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d034      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aec:	d007      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003aee:	e011      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	4a11      	ldr	r2, [pc, #68]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003afc:	e00e      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	3308      	adds	r3, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fca4 	bl	8004454 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b32:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b56:	2300      	movs	r3, #0
 8003b58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d00c      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	3328      	adds	r3, #40	@ 0x28
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fd23 	bl	80045b8 <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b94:	460b      	mov	r3, r1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	d038      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ba6:	d018      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bac:	d811      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb2:	d014      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb8:	d80b      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc4:	4bc3      	ldr	r3, [pc, #780]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	4ac2      	ldr	r2, [pc, #776]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bd8:	e004      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bec:	4bb9      	ldr	r3, [pc, #740]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bfc:	4ab5      	ldr	r2, [pc, #724]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c28:	4baa      	ldr	r3, [pc, #680]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c36:	4aa7      	ldr	r2, [pc, #668]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c52:	460b      	mov	r3, r1
 8003c54:	4313      	orrs	r3, r2
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c58:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c68:	4a9a      	ldr	r2, [pc, #616]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c8a:	4b92      	ldr	r3, [pc, #584]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c98:	4a8e      	ldr	r2, [pc, #568]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cac:	2300      	movs	r3, #0
 8003cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cba:	4b86      	ldr	r3, [pc, #536]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4a85      	ldr	r2, [pc, #532]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cc4:	6113      	str	r3, [r2, #16]
 8003cc6:	4b83      	ldr	r3, [pc, #524]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cd2:	4a80      	ldr	r2, [pc, #512]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cf4:	4b77      	ldr	r3, [pc, #476]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	4a74      	ldr	r2, [pc, #464]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d16:	2300      	movs	r3, #0
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d24:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d34:	4a67      	ldr	r2, [pc, #412]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	2100      	movs	r1, #0
 8003d44:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d011      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fb78 	bl	8004454 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	2100      	movs	r1, #0
 8003d84:	6239      	str	r1, [r7, #32]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d011      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fb58 	bl	8004454 <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	61b9      	str	r1, [r7, #24]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d011      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fb38 	bl	8004454 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	2100      	movs	r1, #0
 8003e04:	6139      	str	r1, [r7, #16]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d011      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3328      	adds	r3, #40	@ 0x28
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fbca 	bl	80045b8 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	2100      	movs	r1, #0
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3328      	adds	r3, #40	@ 0x28
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fbaa 	bl	80045b8 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	2100      	movs	r1, #0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d011      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3328      	adds	r3, #40	@ 0x28
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb8a 	bl	80045b8 <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003eba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed4:	58024400 	.word	0x58024400

08003ed8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003edc:	f7fe fd96 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	58024400 	.word	0x58024400
 8003f00:	08005f54 	.word	0x08005f54

08003f04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f0c:	4ba1      	ldr	r3, [pc, #644]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f16:	4b9f      	ldr	r3, [pc, #636]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	0b1b      	lsrs	r3, r3, #12
 8003f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f22:	4b9c      	ldr	r3, [pc, #624]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f2e:	4b99      	ldr	r3, [pc, #612]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8111 	beq.w	8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	f000 8083 	beq.w	8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f200 80a1 	bhi.w	80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d056      	beq.n	800401c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f6e:	e099      	b.n	80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f70:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02d      	beq.n	8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f7c:	4b85      	ldr	r3, [pc, #532]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	4a84      	ldr	r2, [pc, #528]	@ (8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800419c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fd6:	e087      	b.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	4b6a      	ldr	r3, [pc, #424]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800419c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401a:	e065      	b.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	4b59      	ldr	r3, [pc, #356]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004042:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800419c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405e:	e043      	b.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004072:	4b48      	ldr	r3, [pc, #288]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004082:	ed97 6a03 	vldr	s12, [r7, #12]
 8004086:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800419c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a2:	e021      	b.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b6:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800419c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	0a5b      	lsrs	r3, r3, #9
 80040ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004102:	edd7 6a07 	vldr	s13, [r7, #28]
 8004106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410e:	ee17 2a90 	vmov	r2, s15
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004116:	4b1f      	ldr	r3, [pc, #124]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004128:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800412c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004130:	edd7 6a07 	vldr	s13, [r7, #28]
 8004134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413c:	ee17 2a90 	vmov	r2, s15
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800415a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800415e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416a:	ee17 2a90 	vmov	r2, s15
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
}
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	@ 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58024400 	.word	0x58024400
 8004198:	03d09000 	.word	0x03d09000
 800419c:	46000000 	.word	0x46000000
 80041a0:	4c742400 	.word	0x4c742400
 80041a4:	4a742400 	.word	0x4a742400
 80041a8:	4bbebc20 	.word	0x4bbebc20

080041ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	@ 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041b4:	4ba1      	ldr	r3, [pc, #644]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041be:	4b9f      	ldr	r3, [pc, #636]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	0d1b      	lsrs	r3, r3, #20
 80041c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041ca:	4b9c      	ldr	r3, [pc, #624]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041d6:	4b99      	ldr	r3, [pc, #612]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8111 	beq.w	800441c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	f000 8083 	beq.w	8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	f200 80a1 	bhi.w	800434c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d056      	beq.n	80042c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004216:	e099      	b.n	800434c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004218:	4b88      	ldr	r3, [pc, #544]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02d      	beq.n	8004280 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004224:	4b85      	ldr	r3, [pc, #532]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	08db      	lsrs	r3, r3, #3
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	4a84      	ldr	r2, [pc, #528]	@ (8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424e:	4b7b      	ldr	r3, [pc, #492]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800427e:	e087      	b.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042c2:	e065      	b.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004306:	e043      	b.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b48      	ldr	r3, [pc, #288]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a03 	vldr	s12, [r7, #12]
 800432e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800434a:	e021      	b.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b37      	ldr	r3, [pc, #220]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004390:	4b2a      	ldr	r3, [pc, #168]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	0a5b      	lsrs	r3, r3, #9
 8004396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b6:	ee17 2a90 	vmov	r2, s15
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043be:	4b1f      	ldr	r3, [pc, #124]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e4:	ee17 2a90 	vmov	r2, s15
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	0e1b      	lsrs	r3, r3, #24
 80043f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004406:	edd7 6a07 	vldr	s13, [r7, #28]
 800440a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004412:	ee17 2a90 	vmov	r2, s15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800441a:	e008      	b.n	800442e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
}
 800442e:	bf00      	nop
 8004430:	3724      	adds	r7, #36	@ 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
 8004440:	03d09000 	.word	0x03d09000
 8004444:	46000000 	.word	0x46000000
 8004448:	4c742400 	.word	0x4c742400
 800444c:	4a742400 	.word	0x4a742400
 8004450:	4bbebc20 	.word	0x4bbebc20

08004454 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004462:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b03      	cmp	r3, #3
 800446c:	d101      	bne.n	8004472 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e099      	b.n	80045a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004472:	4b4f      	ldr	r3, [pc, #316]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4e      	ldr	r2, [pc, #312]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004478:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fc fe0f 	bl	80010a0 <HAL_GetTick>
 8004482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004484:	e008      	b.n	8004498 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004486:	f7fc fe0b 	bl	80010a0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e086      	b.n	80045a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004498:	4b45      	ldr	r3, [pc, #276]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044a4:	4b42      	ldr	r3, [pc, #264]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	493f      	ldr	r1, [pc, #252]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	3b01      	subs	r3, #1
 80044be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	025b      	lsls	r3, r3, #9
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044e8:	4931      	ldr	r1, [pc, #196]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044ee:	4b30      	ldr	r3, [pc, #192]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	492d      	ldr	r1, [pc, #180]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004500:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	f023 0220 	bic.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	4928      	ldr	r1, [pc, #160]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004512:	4b27      	ldr	r3, [pc, #156]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	4a26      	ldr	r2, [pc, #152]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004518:	f023 0310 	bic.w	r3, r3, #16
 800451c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800451e:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004522:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <RCCEx_PLL2_Config+0x160>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	69d2      	ldr	r2, [r2, #28]
 800452a:	00d2      	lsls	r2, r2, #3
 800452c:	4920      	ldr	r1, [pc, #128]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004532:	4b1f      	ldr	r3, [pc, #124]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004538:	f043 0310 	orr.w	r3, r3, #16
 800453c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800454a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800454e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004550:	e00f      	b.n	8004572 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800455e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004564:	e005      	b.n	8004572 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	4a11      	ldr	r2, [pc, #68]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800456c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004570:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 8004578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800457c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457e:	f7fc fd8f 	bl	80010a0 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004584:	e008      	b.n	8004598 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004586:	f7fc fd8b 	bl	80010a0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <RCCEx_PLL2_Config+0x15c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
 80045b4:	ffff0007 	.word	0xffff0007

080045b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045c6:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d101      	bne.n	80045d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e099      	b.n	800470a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4e      	ldr	r2, [pc, #312]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e2:	f7fc fd5d 	bl	80010a0 <HAL_GetTick>
 80045e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045e8:	e008      	b.n	80045fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ea:	f7fc fd59 	bl	80010a0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e086      	b.n	800470a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045fc:	4b45      	ldr	r3, [pc, #276]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004608:	4b42      	ldr	r3, [pc, #264]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	051b      	lsls	r3, r3, #20
 8004616:	493f      	ldr	r1, [pc, #252]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	628b      	str	r3, [r1, #40]	@ 0x28
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	3b01      	subs	r3, #1
 8004622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	3b01      	subs	r3, #1
 800462c:	025b      	lsls	r3, r3, #9
 800462e:	b29b      	uxth	r3, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3b01      	subs	r3, #1
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800464c:	4931      	ldr	r1, [pc, #196]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004652:	4b30      	ldr	r3, [pc, #192]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	492d      	ldr	r1, [pc, #180]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004664:	4b2b      	ldr	r3, [pc, #172]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4928      	ldr	r1, [pc, #160]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004676:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	4a26      	ldr	r2, [pc, #152]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 800467c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004682:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	4b24      	ldr	r3, [pc, #144]	@ (8004718 <RCCEx_PLL3_Config+0x160>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	69d2      	ldr	r2, [r2, #28]
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	4920      	ldr	r1, [pc, #128]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004696:	4b1f      	ldr	r3, [pc, #124]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	4a1e      	ldr	r2, [pc, #120]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046b4:	e00f      	b.n	80046d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	4a14      	ldr	r2, [pc, #80]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046c8:	e005      	b.n	80046d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046ca:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4a11      	ldr	r2, [pc, #68]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a0e      	ldr	r2, [pc, #56]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e2:	f7fc fcdd 	bl	80010a0 <HAL_GetTick>
 80046e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046e8:	e008      	b.n	80046fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ea:	f7fc fcd9 	bl	80010a0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e006      	b.n	800470a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <RCCEx_PLL3_Config+0x15c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
 8004718:	ffff0007 	.word	0xffff0007

0800471c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e042      	b.n	80047b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc f9ed 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	@ 0x24
 800474a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fd90 	bl	800528c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f825 	bl	80047bc <UART_SetConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e01b      	b.n	80047b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800478a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800479a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fe0f 	bl	80053d0 <UART_CheckIdleState>
 80047b2:	4603      	mov	r3, r0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b092      	sub	sp, #72	@ 0x48
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	431a      	orrs	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4bbe      	ldr	r3, [pc, #760]	@ (8004ae4 <UART_SetConfig+0x328>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4ab3      	ldr	r2, [pc, #716]	@ (8004ae8 <UART_SetConfig+0x32c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004824:	4313      	orrs	r3, r2
 8004826:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	4baf      	ldr	r3, [pc, #700]	@ (8004aec <UART_SetConfig+0x330>)
 8004830:	4013      	ands	r3, r2
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004838:	430b      	orrs	r3, r1
 800483a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	f023 010f 	bic.w	r1, r3, #15
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4aa6      	ldr	r2, [pc, #664]	@ (8004af0 <UART_SetConfig+0x334>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d177      	bne.n	800494c <UART_SetConfig+0x190>
 800485c:	4ba5      	ldr	r3, [pc, #660]	@ (8004af4 <UART_SetConfig+0x338>)
 800485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004864:	2b28      	cmp	r3, #40	@ 0x28
 8004866:	d86d      	bhi.n	8004944 <UART_SetConfig+0x188>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <UART_SetConfig+0xb4>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004915 	.word	0x08004915
 8004874:	08004945 	.word	0x08004945
 8004878:	08004945 	.word	0x08004945
 800487c:	08004945 	.word	0x08004945
 8004880:	08004945 	.word	0x08004945
 8004884:	08004945 	.word	0x08004945
 8004888:	08004945 	.word	0x08004945
 800488c:	08004945 	.word	0x08004945
 8004890:	0800491d 	.word	0x0800491d
 8004894:	08004945 	.word	0x08004945
 8004898:	08004945 	.word	0x08004945
 800489c:	08004945 	.word	0x08004945
 80048a0:	08004945 	.word	0x08004945
 80048a4:	08004945 	.word	0x08004945
 80048a8:	08004945 	.word	0x08004945
 80048ac:	08004945 	.word	0x08004945
 80048b0:	08004925 	.word	0x08004925
 80048b4:	08004945 	.word	0x08004945
 80048b8:	08004945 	.word	0x08004945
 80048bc:	08004945 	.word	0x08004945
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004945 	.word	0x08004945
 80048c8:	08004945 	.word	0x08004945
 80048cc:	08004945 	.word	0x08004945
 80048d0:	0800492d 	.word	0x0800492d
 80048d4:	08004945 	.word	0x08004945
 80048d8:	08004945 	.word	0x08004945
 80048dc:	08004945 	.word	0x08004945
 80048e0:	08004945 	.word	0x08004945
 80048e4:	08004945 	.word	0x08004945
 80048e8:	08004945 	.word	0x08004945
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004945 	.word	0x08004945
 80048f8:	08004945 	.word	0x08004945
 80048fc:	08004945 	.word	0x08004945
 8004900:	08004945 	.word	0x08004945
 8004904:	08004945 	.word	0x08004945
 8004908:	08004945 	.word	0x08004945
 800490c:	08004945 	.word	0x08004945
 8004910:	0800493d 	.word	0x0800493d
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e222      	b.n	8004d62 <UART_SetConfig+0x5a6>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e21e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e21a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e216      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004934:	2320      	movs	r3, #32
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493a:	e212      	b.n	8004d62 <UART_SetConfig+0x5a6>
 800493c:	2340      	movs	r3, #64	@ 0x40
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004942:	e20e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494a:	e20a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a69      	ldr	r2, [pc, #420]	@ (8004af8 <UART_SetConfig+0x33c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d130      	bne.n	80049b8 <UART_SetConfig+0x1fc>
 8004956:	4b67      	ldr	r3, [pc, #412]	@ (8004af4 <UART_SetConfig+0x338>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b05      	cmp	r3, #5
 8004960:	d826      	bhi.n	80049b0 <UART_SetConfig+0x1f4>
 8004962:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x1ac>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	08004981 	.word	0x08004981
 800496c:	08004989 	.word	0x08004989
 8004970:	08004991 	.word	0x08004991
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e1ec      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e1e8      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e1e4      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e1e0      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049a0:	2320      	movs	r3, #32
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e1dc      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049a8:	2340      	movs	r3, #64	@ 0x40
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ae:	e1d8      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e1d4      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	@ (8004afc <UART_SetConfig+0x340>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d130      	bne.n	8004a24 <UART_SetConfig+0x268>
 80049c2:	4b4c      	ldr	r3, [pc, #304]	@ (8004af4 <UART_SetConfig+0x338>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d826      	bhi.n	8004a1c <UART_SetConfig+0x260>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0x218>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049fd 	.word	0x080049fd
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e1b6      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e1b2      	b.n	8004d62 <UART_SetConfig+0x5a6>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e1ae      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e1aa      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e1a6      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a14:	2340      	movs	r3, #64	@ 0x40
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1a:	e1a2      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a22:	e19e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a35      	ldr	r2, [pc, #212]	@ (8004b00 <UART_SetConfig+0x344>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d130      	bne.n	8004a90 <UART_SetConfig+0x2d4>
 8004a2e:	4b31      	ldr	r3, [pc, #196]	@ (8004af4 <UART_SetConfig+0x338>)
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d826      	bhi.n	8004a88 <UART_SetConfig+0x2cc>
 8004a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0x284>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	e180      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a66:	e17c      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e178      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e174      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a78:	2320      	movs	r3, #32
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e170      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a80:	2340      	movs	r3, #64	@ 0x40
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a86:	e16c      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a88:	2380      	movs	r3, #128	@ 0x80
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8e:	e168      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <UART_SetConfig+0x348>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d142      	bne.n	8004b20 <UART_SetConfig+0x364>
 8004a9a:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <UART_SetConfig+0x338>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d838      	bhi.n	8004b18 <UART_SetConfig+0x35c>
 8004aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <UART_SetConfig+0x2f0>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ac5 	.word	0x08004ac5
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	08004ad5 	.word	0x08004ad5
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004b09 	.word	0x08004b09
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aca:	e14a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e146      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e142      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e13e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004ae4:	cfff69f3 	.word	0xcfff69f3
 8004ae8:	58000c00 	.word	0x58000c00
 8004aec:	11fff4ff 	.word	0x11fff4ff
 8004af0:	40011000 	.word	0x40011000
 8004af4:	58024400 	.word	0x58024400
 8004af8:	40004400 	.word	0x40004400
 8004afc:	40004800 	.word	0x40004800
 8004b00:	40004c00 	.word	0x40004c00
 8004b04:	40005000 	.word	0x40005000
 8004b08:	2320      	movs	r3, #32
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e128      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004b10:	2340      	movs	r3, #64	@ 0x40
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e124      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e120      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4acb      	ldr	r2, [pc, #812]	@ (8004e54 <UART_SetConfig+0x698>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d176      	bne.n	8004c18 <UART_SetConfig+0x45c>
 8004b2a:	4bcb      	ldr	r3, [pc, #812]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b32:	2b28      	cmp	r3, #40	@ 0x28
 8004b34:	d86c      	bhi.n	8004c10 <UART_SetConfig+0x454>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <UART_SetConfig+0x380>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004be1 	.word	0x08004be1
 8004b40:	08004c11 	.word	0x08004c11
 8004b44:	08004c11 	.word	0x08004c11
 8004b48:	08004c11 	.word	0x08004c11
 8004b4c:	08004c11 	.word	0x08004c11
 8004b50:	08004c11 	.word	0x08004c11
 8004b54:	08004c11 	.word	0x08004c11
 8004b58:	08004c11 	.word	0x08004c11
 8004b5c:	08004be9 	.word	0x08004be9
 8004b60:	08004c11 	.word	0x08004c11
 8004b64:	08004c11 	.word	0x08004c11
 8004b68:	08004c11 	.word	0x08004c11
 8004b6c:	08004c11 	.word	0x08004c11
 8004b70:	08004c11 	.word	0x08004c11
 8004b74:	08004c11 	.word	0x08004c11
 8004b78:	08004c11 	.word	0x08004c11
 8004b7c:	08004bf1 	.word	0x08004bf1
 8004b80:	08004c11 	.word	0x08004c11
 8004b84:	08004c11 	.word	0x08004c11
 8004b88:	08004c11 	.word	0x08004c11
 8004b8c:	08004c11 	.word	0x08004c11
 8004b90:	08004c11 	.word	0x08004c11
 8004b94:	08004c11 	.word	0x08004c11
 8004b98:	08004c11 	.word	0x08004c11
 8004b9c:	08004bf9 	.word	0x08004bf9
 8004ba0:	08004c11 	.word	0x08004c11
 8004ba4:	08004c11 	.word	0x08004c11
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004c11 	.word	0x08004c11
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004c11 	.word	0x08004c11
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c01 	.word	0x08004c01
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004c11 	.word	0x08004c11
 8004bc8:	08004c11 	.word	0x08004c11
 8004bcc:	08004c11 	.word	0x08004c11
 8004bd0:	08004c11 	.word	0x08004c11
 8004bd4:	08004c11 	.word	0x08004c11
 8004bd8:	08004c11 	.word	0x08004c11
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e0bc      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e0b8      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf6:	e0b4      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e0b0      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e0ac      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c08:	2340      	movs	r3, #64	@ 0x40
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e0a8      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e0a4      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a8f      	ldr	r2, [pc, #572]	@ (8004e5c <UART_SetConfig+0x6a0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d130      	bne.n	8004c84 <UART_SetConfig+0x4c8>
 8004c22:	4b8d      	ldr	r3, [pc, #564]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d826      	bhi.n	8004c7c <UART_SetConfig+0x4c0>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x478>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c4d 	.word	0x08004c4d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e086      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e082      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e07e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e07a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e076      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c74:	2340      	movs	r3, #64	@ 0x40
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e072      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c82:	e06e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a75      	ldr	r2, [pc, #468]	@ (8004e60 <UART_SetConfig+0x6a4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d130      	bne.n	8004cf0 <UART_SetConfig+0x534>
 8004c8e:	4b72      	ldr	r3, [pc, #456]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d826      	bhi.n	8004ce8 <UART_SetConfig+0x52c>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x4e4>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb9 	.word	0x08004cb9
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004cc9 	.word	0x08004cc9
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e050      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e04c      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e048      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e044      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e040      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004ce0:	2340      	movs	r3, #64	@ 0x40
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e03c      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cee:	e038      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5b      	ldr	r2, [pc, #364]	@ (8004e64 <UART_SetConfig+0x6a8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d130      	bne.n	8004d5c <UART_SetConfig+0x5a0>
 8004cfa:	4b57      	ldr	r3, [pc, #348]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d826      	bhi.n	8004d54 <UART_SetConfig+0x598>
 8004d06:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <UART_SetConfig+0x550>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	2302      	movs	r3, #2
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e01a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e016      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e012      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e00e      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d44:	2320      	movs	r3, #32
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e00a      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d4c:	2340      	movs	r3, #64	@ 0x40
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d52:	e006      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5a:	e002      	b.n	8004d62 <UART_SetConfig+0x5a6>
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3f      	ldr	r2, [pc, #252]	@ (8004e64 <UART_SetConfig+0x6a8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f040 80f8 	bne.w	8004f5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	dc46      	bgt.n	8004e04 <UART_SetConfig+0x648>
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	f2c0 8082 	blt.w	8004e80 <UART_SetConfig+0x6c4>
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	2b1e      	cmp	r3, #30
 8004d80:	d87e      	bhi.n	8004e80 <UART_SetConfig+0x6c4>
 8004d82:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <UART_SetConfig+0x5cc>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004e0b 	.word	0x08004e0b
 8004d8c:	08004e81 	.word	0x08004e81
 8004d90:	08004e13 	.word	0x08004e13
 8004d94:	08004e81 	.word	0x08004e81
 8004d98:	08004e81 	.word	0x08004e81
 8004d9c:	08004e81 	.word	0x08004e81
 8004da0:	08004e23 	.word	0x08004e23
 8004da4:	08004e81 	.word	0x08004e81
 8004da8:	08004e81 	.word	0x08004e81
 8004dac:	08004e81 	.word	0x08004e81
 8004db0:	08004e81 	.word	0x08004e81
 8004db4:	08004e81 	.word	0x08004e81
 8004db8:	08004e81 	.word	0x08004e81
 8004dbc:	08004e81 	.word	0x08004e81
 8004dc0:	08004e33 	.word	0x08004e33
 8004dc4:	08004e81 	.word	0x08004e81
 8004dc8:	08004e81 	.word	0x08004e81
 8004dcc:	08004e81 	.word	0x08004e81
 8004dd0:	08004e81 	.word	0x08004e81
 8004dd4:	08004e81 	.word	0x08004e81
 8004dd8:	08004e81 	.word	0x08004e81
 8004ddc:	08004e81 	.word	0x08004e81
 8004de0:	08004e81 	.word	0x08004e81
 8004de4:	08004e81 	.word	0x08004e81
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e81 	.word	0x08004e81
 8004df0:	08004e81 	.word	0x08004e81
 8004df4:	08004e81 	.word	0x08004e81
 8004df8:	08004e81 	.word	0x08004e81
 8004dfc:	08004e81 	.word	0x08004e81
 8004e00:	08004e73 	.word	0x08004e73
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d037      	beq.n	8004e78 <UART_SetConfig+0x6bc>
 8004e08:	e03a      	b.n	8004e80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e0a:	f7ff f865 	bl	8003ed8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e10:	e03c      	b.n	8004e8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff f874 	bl	8003f04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e20:	e034      	b.n	8004e8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e22:	f107 0318 	add.w	r3, r7, #24
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f9c0 	bl	80041ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e30:	e02c      	b.n	8004e8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e32:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <UART_SetConfig+0x69c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	08db      	lsrs	r3, r3, #3
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	4a07      	ldr	r2, [pc, #28]	@ (8004e68 <UART_SetConfig+0x6ac>)
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e50:	e01c      	b.n	8004e8c <UART_SetConfig+0x6d0>
 8004e52:	bf00      	nop
 8004e54:	40011400 	.word	0x40011400
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	40007800 	.word	0x40007800
 8004e60:	40007c00 	.word	0x40007c00
 8004e64:	58000c00 	.word	0x58000c00
 8004e68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b9d      	ldr	r3, [pc, #628]	@ (80050e4 <UART_SetConfig+0x928>)
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e70:	e00c      	b.n	8004e8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e72:	4b9d      	ldr	r3, [pc, #628]	@ (80050e8 <UART_SetConfig+0x92c>)
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e76:	e009      	b.n	8004e8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e7e:	e005      	b.n	8004e8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 81de 	beq.w	8005250 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	4a94      	ldr	r2, [pc, #592]	@ (80050ec <UART_SetConfig+0x930>)
 8004e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d305      	bcc.n	8004ec4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004eca:	e1c1      	b.n	8005250 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ece:	2200      	movs	r2, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	60fa      	str	r2, [r7, #12]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	4a84      	ldr	r2, [pc, #528]	@ (80050ec <UART_SetConfig+0x930>)
 8004eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eee:	f7fb f9f3 	bl	80002d8 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	020b      	lsls	r3, r1, #8
 8004f04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f08:	0202      	lsls	r2, r0, #8
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	6849      	ldr	r1, [r1, #4]
 8004f0e:	0849      	lsrs	r1, r1, #1
 8004f10:	2000      	movs	r0, #0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4605      	mov	r5, r0
 8004f16:	eb12 0804 	adds.w	r8, r2, r4
 8004f1a:	eb43 0905 	adc.w	r9, r3, r5
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	469a      	mov	sl, r3
 8004f26:	4693      	mov	fp, r2
 8004f28:	4652      	mov	r2, sl
 8004f2a:	465b      	mov	r3, fp
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb f9d2 	bl	80002d8 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f42:	d308      	bcc.n	8004f56 <UART_SetConfig+0x79a>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4a:	d204      	bcs.n	8004f56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e17c      	b.n	8005250 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f5c:	e178      	b.n	8005250 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f66:	f040 80c5 	bne.w	80050f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	dc48      	bgt.n	8005004 <UART_SetConfig+0x848>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	db7b      	blt.n	800506e <UART_SetConfig+0x8b2>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d879      	bhi.n	800506e <UART_SetConfig+0x8b2>
 8004f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <UART_SetConfig+0x7c4>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	0800500b 	.word	0x0800500b
 8004f84:	08005013 	.word	0x08005013
 8004f88:	0800506f 	.word	0x0800506f
 8004f8c:	0800506f 	.word	0x0800506f
 8004f90:	0800501b 	.word	0x0800501b
 8004f94:	0800506f 	.word	0x0800506f
 8004f98:	0800506f 	.word	0x0800506f
 8004f9c:	0800506f 	.word	0x0800506f
 8004fa0:	0800502b 	.word	0x0800502b
 8004fa4:	0800506f 	.word	0x0800506f
 8004fa8:	0800506f 	.word	0x0800506f
 8004fac:	0800506f 	.word	0x0800506f
 8004fb0:	0800506f 	.word	0x0800506f
 8004fb4:	0800506f 	.word	0x0800506f
 8004fb8:	0800506f 	.word	0x0800506f
 8004fbc:	0800506f 	.word	0x0800506f
 8004fc0:	0800503b 	.word	0x0800503b
 8004fc4:	0800506f 	.word	0x0800506f
 8004fc8:	0800506f 	.word	0x0800506f
 8004fcc:	0800506f 	.word	0x0800506f
 8004fd0:	0800506f 	.word	0x0800506f
 8004fd4:	0800506f 	.word	0x0800506f
 8004fd8:	0800506f 	.word	0x0800506f
 8004fdc:	0800506f 	.word	0x0800506f
 8004fe0:	0800506f 	.word	0x0800506f
 8004fe4:	0800506f 	.word	0x0800506f
 8004fe8:	0800506f 	.word	0x0800506f
 8004fec:	0800506f 	.word	0x0800506f
 8004ff0:	0800506f 	.word	0x0800506f
 8004ff4:	0800506f 	.word	0x0800506f
 8004ff8:	0800506f 	.word	0x0800506f
 8004ffc:	0800506f 	.word	0x0800506f
 8005000:	08005061 	.word	0x08005061
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d02e      	beq.n	8005066 <UART_SetConfig+0x8aa>
 8005008:	e031      	b.n	800506e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500a:	f7fd fd2f 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 800500e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005010:	e033      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005012:	f7fd fd41 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8005016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005018:	e02f      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800501a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe ff70 	bl	8003f04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005028:	e027      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800502a:	f107 0318 	add.w	r3, r7, #24
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff f8bc 	bl	80041ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005038:	e01f      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800503a:	4b2d      	ldr	r3, [pc, #180]	@ (80050f0 <UART_SetConfig+0x934>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <UART_SetConfig+0x934>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	4a24      	ldr	r2, [pc, #144]	@ (80050e4 <UART_SetConfig+0x928>)
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005058:	e00f      	b.n	800507a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800505a:	4b22      	ldr	r3, [pc, #136]	@ (80050e4 <UART_SetConfig+0x928>)
 800505c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800505e:	e00c      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005060:	4b21      	ldr	r3, [pc, #132]	@ (80050e8 <UART_SetConfig+0x92c>)
 8005062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005064:	e009      	b.n	800507a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800506c:	e005      	b.n	800507a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800507a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80e7 	beq.w	8005250 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	4a19      	ldr	r2, [pc, #100]	@ (80050ec <UART_SetConfig+0x930>)
 8005088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508c:	461a      	mov	r2, r3
 800508e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005090:	fbb3 f3f2 	udiv	r3, r3, r2
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	441a      	add	r2, r3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	d916      	bls.n	80050dc <UART_SetConfig+0x920>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d212      	bcs.n	80050dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f023 030f 	bic.w	r3, r3, #15
 80050be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050ce:	4313      	orrs	r3, r2
 80050d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e0b9      	b.n	8005250 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80050e2:	e0b5      	b.n	8005250 <UART_SetConfig+0xa94>
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	08005f64 	.word	0x08005f64
 80050f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	dc49      	bgt.n	8005190 <UART_SetConfig+0x9d4>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	db7c      	blt.n	80051fa <UART_SetConfig+0xa3e>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d87a      	bhi.n	80051fa <UART_SetConfig+0xa3e>
 8005104:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x950>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005197 	.word	0x08005197
 8005110:	0800519f 	.word	0x0800519f
 8005114:	080051fb 	.word	0x080051fb
 8005118:	080051fb 	.word	0x080051fb
 800511c:	080051a7 	.word	0x080051a7
 8005120:	080051fb 	.word	0x080051fb
 8005124:	080051fb 	.word	0x080051fb
 8005128:	080051fb 	.word	0x080051fb
 800512c:	080051b7 	.word	0x080051b7
 8005130:	080051fb 	.word	0x080051fb
 8005134:	080051fb 	.word	0x080051fb
 8005138:	080051fb 	.word	0x080051fb
 800513c:	080051fb 	.word	0x080051fb
 8005140:	080051fb 	.word	0x080051fb
 8005144:	080051fb 	.word	0x080051fb
 8005148:	080051fb 	.word	0x080051fb
 800514c:	080051c7 	.word	0x080051c7
 8005150:	080051fb 	.word	0x080051fb
 8005154:	080051fb 	.word	0x080051fb
 8005158:	080051fb 	.word	0x080051fb
 800515c:	080051fb 	.word	0x080051fb
 8005160:	080051fb 	.word	0x080051fb
 8005164:	080051fb 	.word	0x080051fb
 8005168:	080051fb 	.word	0x080051fb
 800516c:	080051fb 	.word	0x080051fb
 8005170:	080051fb 	.word	0x080051fb
 8005174:	080051fb 	.word	0x080051fb
 8005178:	080051fb 	.word	0x080051fb
 800517c:	080051fb 	.word	0x080051fb
 8005180:	080051fb 	.word	0x080051fb
 8005184:	080051fb 	.word	0x080051fb
 8005188:	080051fb 	.word	0x080051fb
 800518c:	080051ed 	.word	0x080051ed
 8005190:	2b40      	cmp	r3, #64	@ 0x40
 8005192:	d02e      	beq.n	80051f2 <UART_SetConfig+0xa36>
 8005194:	e031      	b.n	80051fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005196:	f7fd fc69 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 800519a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800519c:	e033      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800519e:	f7fd fc7b 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80051a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051a4:	e02f      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe feaa 	bl	8003f04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051b4:	e027      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051b6:	f107 0318 	add.w	r3, r7, #24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fff6 	bl	80041ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051c4:	e01f      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c6:	4b2d      	ldr	r3, [pc, #180]	@ (800527c <UART_SetConfig+0xac0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051d2:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <UART_SetConfig+0xac0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	4a28      	ldr	r2, [pc, #160]	@ (8005280 <UART_SetConfig+0xac4>)
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051e4:	e00f      	b.n	8005206 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80051e6:	4b26      	ldr	r3, [pc, #152]	@ (8005280 <UART_SetConfig+0xac4>)
 80051e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051ea:	e00c      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051ec:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <UART_SetConfig+0xac8>)
 80051ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f0:	e009      	b.n	8005206 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f8:	e005      	b.n	8005206 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005204:	bf00      	nop
    }

    if (pclk != 0U)
 8005206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d021      	beq.n	8005250 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <UART_SetConfig+0xacc>)
 8005212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005216:	461a      	mov	r2, r3
 8005218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521a:	fbb3 f2f2 	udiv	r2, r3, r2
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	441a      	add	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	2b0f      	cmp	r3, #15
 8005234:	d909      	bls.n	800524a <UART_SetConfig+0xa8e>
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523c:	d205      	bcs.n	800524a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	b29a      	uxth	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	e002      	b.n	8005250 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2201      	movs	r2, #1
 8005254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2201      	movs	r2, #1
 800525c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800526c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005270:	4618      	mov	r0, r3
 8005272:	3748      	adds	r7, #72	@ 0x48
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	03d09000 	.word	0x03d09000
 8005284:	003d0900 	.word	0x003d0900
 8005288:	08005f64 	.word	0x08005f64

0800528c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800538a:	d10a      	bne.n	80053a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b098      	sub	sp, #96	@ 0x60
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e0:	f7fb fe5e 	bl	80010a0 <HAL_GetTick>
 80053e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d12f      	bne.n	8005454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f88e 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d022      	beq.n	8005454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800541c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005422:	653b      	str	r3, [r7, #80]	@ 0x50
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
 800542e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800543a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e6      	bne.n	800540e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e063      	b.n	800551c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d149      	bne.n	80054f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546a:	2200      	movs	r2, #0
 800546c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f857 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d03c      	beq.n	80054f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	623b      	str	r3, [r7, #32]
   return(result);
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549a:	633b      	str	r3, [r7, #48]	@ 0x30
 800549c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ce:	61fa      	str	r2, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	617b      	str	r3, [r7, #20]
   return(result);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e012      	b.n	800551c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3758      	adds	r7, #88	@ 0x58
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	e04f      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d04b      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fb fdaf 	bl	80010a0 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e04e      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d037      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d034      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d031      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d110      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f839 	bl	8005600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2208      	movs	r2, #8
 8005592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e029      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b0:	d111      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f81f 	bl	8005600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d0a0      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b095      	sub	sp, #84	@ 0x54
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005626:	643b      	str	r3, [r7, #64]	@ 0x40
 8005628:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800562c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	61fb      	str	r3, [r7, #28]
   return(result);
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <UART_EndRxTransfer+0xc8>)
 800564e:	4013      	ands	r3, r2
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800565a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d118      	bne.n	80056a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60bb      	str	r3, [r7, #8]
   return(result);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	647b      	str	r3, [r7, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	613b      	str	r3, [r7, #16]
   return(result);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056bc:	bf00      	nop
 80056be:	3754      	adds	r7, #84	@ 0x54
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	effffffe 	.word	0xeffffffe

080056cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80056de:	2302      	movs	r3, #2
 80056e0:	e027      	b.n	8005732 <HAL_UARTEx_DisableFifoMode+0x66>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2224      	movs	r2, #36	@ 0x24
 80056ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005710:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005752:	2302      	movs	r3, #2
 8005754:	e02d      	b.n	80057b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2224      	movs	r2, #36	@ 0x24
 8005762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f850 	bl	8005838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e02d      	b.n	800582e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2224      	movs	r2, #36	@ 0x24
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f812 	bl	8005838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005844:	2b00      	cmp	r3, #0
 8005846:	d108      	bne.n	800585a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005858:	e031      	b.n	80058be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800585a:	2310      	movs	r3, #16
 800585c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800585e:	2310      	movs	r3, #16
 8005860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	0e5b      	lsrs	r3, r3, #25
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	0f5b      	lsrs	r3, r3, #29
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	7b3a      	ldrb	r2, [r7, #12]
 8005886:	4911      	ldr	r1, [pc, #68]	@ (80058cc <UARTEx_SetNbDataToProcess+0x94>)
 8005888:	5c8a      	ldrb	r2, [r1, r2]
 800588a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800588e:	7b3a      	ldrb	r2, [r7, #12]
 8005890:	490f      	ldr	r1, [pc, #60]	@ (80058d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005894:	fb93 f3f2 	sdiv	r3, r3, r2
 8005898:	b29a      	uxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	7b7a      	ldrb	r2, [r7, #13]
 80058a4:	4909      	ldr	r1, [pc, #36]	@ (80058cc <UARTEx_SetNbDataToProcess+0x94>)
 80058a6:	5c8a      	ldrb	r2, [r1, r2]
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058ac:	7b7a      	ldrb	r2, [r7, #13]
 80058ae:	4908      	ldr	r1, [pc, #32]	@ (80058d0 <UARTEx_SetNbDataToProcess+0x98>)
 80058b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	08005f7c 	.word	0x08005f7c
 80058d0:	08005f84 	.word	0x08005f84

080058d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d4:	b084      	sub	sp, #16
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	f107 001c 	add.w	r0, r7, #28
 80058e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d121      	bne.n	8005932 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	4b2c      	ldr	r3, [pc, #176]	@ (80059b0 <USB_CoreInit+0xdc>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005912:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 faaa 	bl	8005e80 <USB_CoreReset>
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]
 8005930:	e01b      	b.n	800596a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa9e 	bl	8005e80 <USB_CoreReset>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005948:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	@ 0x38
 800595c:	e005      	b.n	800596a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800596a:	7fbb      	ldrb	r3, [r7, #30]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d116      	bne.n	800599e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <USB_CoreInit+0xe0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f043 0206 	orr.w	r2, r3, #6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059aa:	b004      	add	sp, #16
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	ffbdffbf 	.word	0xffbdffbf
 80059b4:	03ee0000 	.word	0x03ee0000

080059b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 0201 	bic.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d115      	bne.n	8005a28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a08:	200a      	movs	r0, #10
 8005a0a:	f7fb fb55 	bl	80010b8 <HAL_Delay>
      ms += 10U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	330a      	adds	r3, #10
 8005a12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa25 	bl	8005e64 <USB_GetMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d01e      	beq.n	8005a5e <USB_SetCurrentMode+0x84>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a24:	d9f0      	bls.n	8005a08 <USB_SetCurrentMode+0x2e>
 8005a26:	e01a      	b.n	8005a5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d115      	bne.n	8005a5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a3a:	200a      	movs	r0, #10
 8005a3c:	f7fb fb3c 	bl	80010b8 <HAL_Delay>
      ms += 10U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	330a      	adds	r3, #10
 8005a44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa0c 	bl	8005e64 <USB_GetMode>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <USB_SetCurrentMode+0x84>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a56:	d9f0      	bls.n	8005a3a <USB_SetCurrentMode+0x60>
 8005a58:	e001      	b.n	8005a5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e005      	b.n	8005a6a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a62:	d101      	bne.n	8005a68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a74:	b084      	sub	sp, #16
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e009      	b.n	8005aa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3340      	adds	r3, #64	@ 0x40
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b0e      	cmp	r3, #14
 8005aac:	d9f2      	bls.n	8005a94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11c      	bne.n	8005af0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e005      	b.n	8005afc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10d      	bne.n	8005b2c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f968 	bl	8005df0 <USB_SetDevSpeed>
 8005b20:	e008      	b.n	8005b34 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b22:	2101      	movs	r1, #1
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f963 	bl	8005df0 <USB_SetDevSpeed>
 8005b2a:	e003      	b.n	8005b34 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b2c:	2103      	movs	r1, #3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f95e 	bl	8005df0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b34:	2110      	movs	r1, #16
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8fa 	bl	8005d30 <USB_FlushTxFifo>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f924 	bl	8005d94 <USB_FlushRxFifo>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	461a      	mov	r2, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e043      	b.n	8005c08 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b96:	d118      	bne.n	8005bca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005baa:	461a      	mov	r2, r3
 8005bac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e013      	b.n	8005bdc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	e008      	b.n	8005bdc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	2300      	movs	r3, #0
 8005bec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d3b5      	bcc.n	8005b80 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e043      	b.n	8005ca2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c30:	d118      	bne.n	8005c64 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e013      	b.n	8005c76 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e008      	b.n	8005c76 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c82:	461a      	mov	r2, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d3b5      	bcc.n	8005c1a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f043 0210 	orr.w	r2, r3, #16
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <USB_DevInit+0x2b4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f043 0208 	orr.w	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <USB_DevInit+0x2b8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	803c3800 	.word	0x803c3800
 8005d2c:	40000004 	.word	0x40000004

08005d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d4a:	d901      	bls.n	8005d50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e01b      	b.n	8005d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	daf2      	bge.n	8005d3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	019b      	lsls	r3, r3, #6
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d74:	d901      	bls.n	8005d7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e006      	b.n	8005d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d0f0      	beq.n	8005d68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dac:	d901      	bls.n	8005db2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e018      	b.n	8005de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	daf2      	bge.n	8005da0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd0:	d901      	bls.n	8005dd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e006      	b.n	8005de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d0f0      	beq.n	8005dc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e3c:	f023 0303 	bic.w	r3, r3, #3
 8005e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f003 0301 	and.w	r3, r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e98:	d901      	bls.n	8005e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e01b      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	daf2      	bge.n	8005e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ec2:	d901      	bls.n	8005ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d0f0      	beq.n	8005eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <memset>:
 8005ee2:	4402      	add	r2, r0
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d100      	bne.n	8005eec <memset+0xa>
 8005eea:	4770      	bx	lr
 8005eec:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef0:	e7f9      	b.n	8005ee6 <memset+0x4>
	...

08005ef4 <__libc_init_array>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8005f2c <__libc_init_array+0x38>)
 8005ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8005f30 <__libc_init_array+0x3c>)
 8005efa:	1b64      	subs	r4, r4, r5
 8005efc:	10a4      	asrs	r4, r4, #2
 8005efe:	2600      	movs	r6, #0
 8005f00:	42a6      	cmp	r6, r4
 8005f02:	d109      	bne.n	8005f18 <__libc_init_array+0x24>
 8005f04:	4d0b      	ldr	r5, [pc, #44]	@ (8005f34 <__libc_init_array+0x40>)
 8005f06:	4c0c      	ldr	r4, [pc, #48]	@ (8005f38 <__libc_init_array+0x44>)
 8005f08:	f000 f818 	bl	8005f3c <_init>
 8005f0c:	1b64      	subs	r4, r4, r5
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	2600      	movs	r6, #0
 8005f12:	42a6      	cmp	r6, r4
 8005f14:	d105      	bne.n	8005f22 <__libc_init_array+0x2e>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1c:	4798      	blx	r3
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7ee      	b.n	8005f00 <__libc_init_array+0xc>
 8005f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f26:	4798      	blx	r3
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7f2      	b.n	8005f12 <__libc_init_array+0x1e>
 8005f2c:	08005f94 	.word	0x08005f94
 8005f30:	08005f94 	.word	0x08005f94
 8005f34:	08005f94 	.word	0x08005f94
 8005f38:	08005f98 	.word	0x08005f98

08005f3c <_init>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr

08005f48 <_fini>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr
